<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_376096_cxp.css_inject_desktop</name>
        <script><![CDATA[var x_376096_cxp = x_376096_cxp || {};
x_376096_cxp.css_inject_desktop = (function () {
	"use strict";
	
	/* eslint no-undef: "error" */
	if (x_376096_cxp.css_inject_desktop) {
		return x_376096_cxp.css_inject_desktop;
	}
	
	x_376096_cxp.loader_desktop.get('window', function ($window) {
		var styleInjector = new StyleInjector($window);
		var loaded = new CXPPromise(function (resolve) {
			if ($window.document && $window.document.body) {
				resolve();
			} else if ($window.document && $window.document.readyState != "loading") {
				// interactive -> DOM built + resources loading
				// complete -> DOM built + resources loaded
				resolve();
			} else {
				$window.addEventListener('DOMContentLoaded', resolve);
			}
		});

		var cachedStyles = $window.localStorage.getItem('x_376096_cxp_classic_ui_styles');
		if (cachedStyles) {
			loaded.then(styleInjector.applyStyles.bind(styleInjector, cachedStyles));
		}

		var ga = new $window.GlideAjax('StyleHelper').setScope('x_376096_cxp');
		ga.addParam('sysparm_name', 'loadClassicUIStyles');
		ga.getXMLAnswer(function (result) {
			loaded.then(styleInjector.applyStyles.bind(styleInjector, result));
			$window.localStorage.setItem('x_376096_cxp_classic_ui_styles', result);
		});
	});

	return {
		type: "css_inject_desktop"
	};

	function StyleInjector($window) {
		var cache = {};
		
		return {
			applyStyles: function (sheetsStr) {
				var handled = [];
				JSON.parse(sheetsStr).forEach(function (sheet) {					
					var cached = sheet.sys_id in cache;
					var element = cached ? cache[sheet.sys_id] : $window.document.createElement('link');
					element.rel = 'stylesheet';

					if (sheet.url) {
						element.href = sheet.url;
					} else if (sheet.v) {
						// generate the link with the last updated value for better browser caching support
						element.href = sheet.sys_id + '.cssdbx?v=' + sheet.v;
					} else {
						if (cached) {
							element.remove();
						}
						
						return;
					}

					if (!cached) {
						element.dataset.cxpId = sheet.sys_id;
						cache[sheet.sys_id] = element;
						$window.document.head.appendChild(element);
					}
					
					handled.push(sheet.sys_id);
				});

				Array.prototype.slice.call($window.document.querySelectorAll('link[data-cxp-id]')).forEach(function (element) {
					if (handled.indexOf(element.dataset.cxpId) == -1) {
						element.remove();
					}
				});				
			}
		};
	}

	function CXPPromise(cb) {
		var resolved = false;
		var thens = [];

		cb(function () {
			resolved = true;
			while (thens.length) {
				thens.shift()();
			}
		});

		return {
			then: function (cb) {
				if (resolved) {
					cb();
				} else {
					thens.push(cb);
				}
			}
		};
	}
})();]]></script>
        <script_name>css_inject_desktop</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-07-08 07:37:07</sys_created_on>
        <sys_id>217e6df197a051102f77b4b3f153af9a</sys_id>
        <sys_mod_count>58</sys_mod_count>
        <sys_name>x_376096_cxp.css_inject_desktop</sys_name>
        <sys_package display_value="Core Experience" source="x_376096_cxp">3c8bfe3897ac11102f77b4b3f153af0e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Core Experience">3c8bfe3897ac11102f77b4b3f153af0e</sys_scope>
        <sys_update_name>sys_ui_script_217e6df197a051102f77b4b3f153af9a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-08 18:37:53</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
