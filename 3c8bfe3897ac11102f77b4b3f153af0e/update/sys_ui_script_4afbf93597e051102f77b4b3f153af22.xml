<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_376096_cxp.ui_action_styles</name>
        <script><![CDATA[var x_376096_cxp = x_376096_cxp || {};
x_376096_cxp.ui_action_styles = (function() {
	"use strict";
	
	/* global setTimeout */
	/* eslint no-undef: "error" */
	if (x_376096_cxp.ui_action_styles) {
		return x_376096_cxp.ui_action_styles;
	}
	
	x_376096_cxp.loader.get('window', function ($window) {
		var styleInjector = new StyleInjector($window);
		var loaded = false;
		var cachedStyles = JSON.parse($window.localStorage.getItem('x_376096_cxp_ui_action_styles'));
		var ga = new $window.GlideAjax('StyleHelper').setScope('x_376096_cxp');
		ga.addParam('sysparm_name', 'loadUIActionStyles');
		ga.getXMLAnswer(function (result) {
			var newStyles = JSON.parse(result);
			if (cachedStyles && cachedStyles.updated) {
				if (newStyles.updated) {
					if (new Date(newStyles.updated) > new Date(cachedStyles.updated)) {
						if (loaded) {
							styleInjector.applyStyles(newStyles);
						}
					}
				}
			} else if (newStyles.updated) {
				// no cached style version exists
				if (loaded) {
					styleInjector.applyStyles(newStyles);
				}
			}
			
			cachedStyles = newStyles;
			$window.localStorage.setItem('x_376096_cxp_ui_action_styles', result);
		});
		
		if ($window.document && $window.document.body) {
			loaded = true;
			styleInjector.applyStyles(cachedStyles);
		} else if ($window.document && $window.document.readyState != "loading") {
			// interactive -> DOM built + resources loading
			// complete -> DOM built + resources loaded
			loaded = true;
			styleInjector.applyStyles(cachedStyles);
		} else {
			$window.addEventListener('DOMContentLoaded', function () {
				loaded = true;
				styleInjector.applyStyles(cachedStyles);
			});
		}
	});

	return {
		type: 'ui_action_styles'
	};
	
	function StyleInjector($window) {
		var injectedStyleElement;
		var cssCache = {};
		
		return {
			applyStyles: function (styleInfo) {
				if (!styleInfo) {
					return;
				}
				
				var css = '';
				styleInfo.styles.forEach(function (style) {
					if (style.ui_actions.length) {
						var selectors = style.ui_actions.map(function (a) { return 'button[gsft_id="' + a + '"]'; });
						if (style.icon) {
							css += selectors.map(function (s) { return s + '::before'; }).join(',');
							css += loadIcon(style.icon);
						}

						if (style.background_color || style.text_color) {
							css += selectors.join(',');
							css += ' {';

							if (style.background_color) {
								css += '\nbackground-color: ' + style.background_color + ' !important;';
							}

							if (style.text_color) {
								css += '\ncolor: ' + style.text_color + ' !important;';
							}

							css += '\n}';
						}

						if (style.background_color_hover || style.text_color_hover) {
							css += selectors.map(function (s) { return s + ':hover'; }).join(',');
							css += ' {';

							if (style.background_color_hover) {
								css += '\nbackground-color: ' + style.background_color_hover + ' !important;';
							}

							if (style.text_color_hover) {
								css += '\ncolor: ' + style.text_color_hover + ' !important;';
							}

							css += '\n}';
						}
					}
				});

				var styleElement = injectedStyleElement || $window.document.createElement('style');
				styleElement.textContent = css;
				if (!injectedStyleElement) {
					injectedStyleElement = styleElement;
					$window.document.head.appendChild(styleElement);
				}
			}
		};
		
		function loadIcon(icon) {
			if (icon in cssCache) {
				return cssCache[icon];
			}
			
			var iconElement = $window.document.createElement('i');
			iconElement.classList.add('icon-' + icon);
			$window.document.body.appendChild(iconElement);
			
			var baseElement = $window.document.createElement('i');
			$window.document.body.appendChild(baseElement);
			
			var iconStyles = $window.getComputedStyle(iconElement, '::before');
			var baseStyles = $window.getComputedStyle(baseElement, '::before');
			var css = ' {';
			
			for (var i = 0; i < iconStyles.length; i++) {
				var attr = iconStyles.item(i);
				if (attr == 'display') {
					// do not handle the display css property because makes us lose the spacer
					continue;
				}
				
				var iconAttr = iconStyles.getPropertyValue(attr);
				if (iconAttr != baseStyles.getPropertyValue(attr)) {
					css += '\n' + attr + ': '; // + iconAttr + ';';
					if (attr == 'content') {
						// the actual icon is encoded in the content, we want to add a space after the icon
						css += iconAttr.replace(/"$/, '\xa0"');
					} else {
						css += iconAttr;
					}
					css += ';';
				}
			}
			
			// https://docs.servicenow.com/csh?version=latest&topicname=next-exp-client-script-globals
			if ($window.NOW.isUsingPolaris) {
				css += 'margin-right: .2rem;';
			}
			
			css += '}\n';
			iconElement.remove();
			baseElement.remove();

			cssCache[icon] = css;
			return css;
		}
	}
})();]]></script>
        <script_name>ui_action_styles</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-07-08 09:48:32</sys_created_on>
        <sys_id>4afbf93597e051102f77b4b3f153af22</sys_id>
        <sys_mod_count>129</sys_mod_count>
        <sys_name>x_376096_cxp.ui_action_styles</sys_name>
        <sys_package display_value="Core Experience" source="x_376096_cxp">3c8bfe3897ac11102f77b4b3f153af0e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Core Experience">3c8bfe3897ac11102f77b4b3f153af0e</sys_scope>
        <sys_update_name>sys_ui_script_4afbf93597e051102f77b4b3f153af22</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-07 20:13:58</sys_updated_on>
        <ui_type>10</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
